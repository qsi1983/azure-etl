{
	"name": "process_json",
	"properties": {
		"folder": {
			"name": "JSON_PROCESSING"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "get_customer_json",
						"type": "DatasetReference"
					},
					"name": "getJsonData",
					"description": "Gets json data from source table."
				}
			],
			"sinks": [
				{
					"name": "putFileToStorage"
				}
			],
			"transformations": [
				{
					"name": "parseJson"
				},
				{
					"name": "extractNestedData"
				},
				{
					"name": "getRequiredFields"
				}
			],
			"scriptLines": [
				"source(output(",
				"          row_id as long,",
				"          etl_id as string,",
				"          created_on as timestamp,",
				"          modified_on as timestamp,",
				"          json_data as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     waterMarkColumn: 'modified_on',",
				"     batchSize: 1000,",
				"     isolationLevel: 'READ_COMMITTED',",
				"     format: 'table') ~> getJsonData",
				"getJsonData parse(technical_data = json_data ? (messageId as string,",
				"          status as string,",
				"          schemaVersion as string,",
				"          involvedParty as (involvedPartyId as string,",
				"          header as (ipType as string,",
				"          soleProprietor as boolean))),",
				"     format: 'json',",
				"     documentForm: 'arrayOfDocuments') ~> parseJson",
				"parseJson derive(message_id = technical_data.messageId,",
				"          operation_status = technical_data.status,",
				"          message_schema_version = technical_data.schemaVersion,",
				"          gip = technical_data.involvedParty.involvedPartyId,",
				"          involved_party_type = technical_data.involvedParty.header.ipType,",
				"          sole_trade_flag = technical_data.involvedParty.header.soleProprietor) ~> extractNestedData",
				"extractNestedData select(mapColumn(",
				"          row_id,",
				"          etl_id,",
				"          created_on,",
				"          modified_on,",
				"          message_id,",
				"          operation_status,",
				"          message_schema_version,",
				"          gip,",
				"          involved_party_type,",
				"          sole_trade_flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> getRequiredFields",
				"getRequiredFields sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     keys:['row_id'],",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> putFileToStorage"
			]
		}
	}
}