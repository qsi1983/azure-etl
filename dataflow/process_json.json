{
	"name": "dataflow1",
	"properties": {
		"folder": {
			"name": "JSON_PROCESSING"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "get_customer_json",
						"type": "DatasetReference"
					},
					"name": "getJsonData",
					"description": "Gets json data from source table."
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "OPTIMUS_FILE_STORAGE",
						"type": "LinkedServiceReference"
					},
					"name": "putFileToStorage"
				}
			],
			"transformations": [
				{
					"name": "parseJson"
				},
				{
					"name": "parse1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          row_id as long,",
				"          etl_id as string,",
				"          created_on as timestamp,",
				"          modified_on as timestamp,",
				"          json_data as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     waterMarkColumn: 'modified_on',",
				"     batchSize: 1000,",
				"     isolationLevel: 'READ_COMMITTED',",
				"     format: 'table') ~> getJsonData",
				"getJsonData parse(title = json_data ? (glossary as (title as string)),",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parseJson",
				"parseJson parse(title_out = title ? (title as string),",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"parse1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> putFileToStorage"
			]
		}
	}
}