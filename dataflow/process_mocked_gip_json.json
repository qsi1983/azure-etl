{
	"name": "process_mocked_gip_json",
	"properties": {
		"folder": {
			"name": "JSON_PROCESSING"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "get_customer_json",
						"type": "DatasetReference"
					},
					"name": "getJsonData",
					"description": "Gets json data from source table."
				}
			],
			"sinks": [
				{
					"name": "putFileToStorage"
				}
			],
			"transformations": [
				{
					"name": "parseJson"
				},
				{
					"name": "extractNestedData"
				},
				{
					"name": "flattenElectronicAddress"
				},
				{
					"name": "parseElectronicAddress"
				},
				{
					"name": "extractElectronicAddress"
				},
				{
					"name": "filterPhoneNumber"
				},
				{
					"name": "selectElectronicAddress"
				},
				{
					"name": "setRankForFiltering"
				},
				{
					"name": "filterPhoneNumberOnRank"
				},
				{
					"name": "addElectronicAddress"
				},
				{
					"name": "getPhoneNumber"
				}
			],
			"scriptLines": [
				"source(output(",
				"          row_id as long,",
				"          etl_id as string,",
				"          created_on as timestamp,",
				"          modified_on as timestamp,",
				"          json_data as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     waterMarkColumn: 'modified_on',",
				"     batchSize: 1000,",
				"     isolationLevel: 'READ_COMMITTED',",
				"     format: 'table') ~> getJsonData",
				"getJsonData parse(technical_data = json_data ? (messageId as string,",
				"          status as string,",
				"          schemaVersion as string,",
				"          involvedParty as (involvedPartyId as string,",
				"          header as (ipType as string,",
				"          soleProprietor as boolean),",
				"          ipLocationElectronicAddresses as string[],",
				"          ipLocationPhysicalAddresses as string[])),",
				"     format: 'json',",
				"     documentForm: 'arrayOfDocuments') ~> parseJson",
				"parseJson derive(message_id = technical_data.messageId,",
				"          operation_status = technical_data.status,",
				"          message_schema_version = technical_data.schemaVersion,",
				"          gip = technical_data.involvedParty.involvedPartyId,",
				"          involved_party_type = technical_data.involvedParty.header.ipType,",
				"          sole_trade_flag = technical_data.involvedParty.header.soleProprietor,",
				"          electronic_address_list = technical_data.involvedParty.ipLocationElectronicAddresses,",
				"          physical_address_list = technical_data.involvedParty.ipLocationPhysicalAddresses,",
				"          row_id = row_id) ~> extractNestedData",
				"extractNestedData foldDown(unroll(technical_data.involvedParty.ipLocationElectronicAddresses),",
				"     mapColumn(",
				"          row_id,",
				"          etl_id,",
				"          electronic_address_list = technical_data.involvedParty.ipLocationElectronicAddresses",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenElectronicAddress",
				"flattenElectronicAddress parse(electronic_address = electronic_address_list ? (electronicAddress as string,",
				"          electronicAddressType as string,",
				"          instanceIdentity as long),",
				"     format: 'json',",
				"     documentForm: 'arrayOfDocuments') ~> parseElectronicAddress",
				"parseElectronicAddress derive(key = electronic_address.electronicAddressType,",
				"          value = electronic_address.electronicAddress,",
				"          instance_identity = electronic_address.instanceIdentity) ~> extractElectronicAddress",
				"selectElectronicAddress filter(equalsIgnoreCase(key, 'TELEPHONE_NUMBER')) ~> filterPhoneNumber",
				"extractElectronicAddress select(mapColumn(",
				"          row_id,",
				"          key,",
				"          value,",
				"          instance_identity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectElectronicAddress",
				"filterPhoneNumber rank(asc(instance_identity, true),",
				"     caseInsensitive: true,",
				"     output(rank as long),",
				"     dense: true) ~> setRankForFiltering",
				"setRankForFiltering filter(rank == 1) ~> filterPhoneNumberOnRank",
				"extractNestedData, getPhoneNumber join(extractNestedData@row_id == getPhoneNumber@row_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> addElectronicAddress",
				"filterPhoneNumberOnRank select(mapColumn(",
				"          row_id,",
				"          electronic_address = value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> getPhoneNumber",
				"addElectronicAddress sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     keys:['row_id'],",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> putFileToStorage"
			]
		}
	}
}